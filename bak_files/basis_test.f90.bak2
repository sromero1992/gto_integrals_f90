program basis_test
  use integral
  use class_basis_function
  implicit none
  real(8)              :: x0(3,2), temp_exps(3), boys1, R, RC(3), nuc_attraction, kinetic, overlap 
  type(gaussian),allocatable :: g(:) ! Declare gaussian basis 
  type(integ) :: S, T, Ven, Vee ! Declare gaussian basis 
  integer  n2, fact2, nb, n_atm_type, atms_of_type_n
    
  nb = 3
  n_atm_type = 1
  atms_of_type_n = 2
  allocate(g(atms_of_type_n))
  !x0(xi,no.atom) 
  x0(1,1)=0.2d0
  x0(2,1)=0.0d0
  x0(3,1)=0.0d0
  !!!!!!!!!!!!!!!!
  !x0(:,2)=x0(:,1)
  x0(1,2)=0.0d0
  x0(2,2)=0.7d0
  x0(3,2)=0.4d0
  !!!!!!!!!!!!!



  g(1)%origin = x0(:,1)
  g(2)%origin = x0(:,2)
  g(1)%nb   = 3
  g(2)%nb   = 3
  g(1)%nbas = 1
  g(2)%nbas = 1

  call g(1)%allocation()
  call g(2)%allocation()

  temp_exps(1)= 3.42525091d0
  temp_exps(2)= 0.62391373d0
  temp_exps(3)= 0.16885540d0
  g(1)%exps    = temp_exps
  g(2)%exps  = temp_exps

  g(1)%coef(1) = 0.15432897d0
  g(1)%coef(2) = 0.53532814d0
  g(1)%coef(3) = 0.44463454d0
  g(2)%coef  = g(1)%coef 

  g(1)%shell(1)= 0
  g(1)%shell(2)= 0
  g(1)%shell(3)= 0
  g(2)%shell = g(1)%shell

  call g(1)%normalization()
  call g(2)%normalization()
  call g(1)%print_gaussian_info()  ! Call a class subroutine
  call g(2)%print_gaussian_info()  ! Call a class subroutine

  call S%S_int(g(1), g(2))
  write(*,*) ' S(a,b) is : ', S%int_val 
  call T%T_int(g(1), g(2))
  write(*,*) ' T(a,b) is : ', T%int_val 
  write(*,*) 'Boys1(1,0.5)', boys1(1,0.5d0)
  write(*,*) 'R_{tuv}^n(p*RPC^2)', R(1,0,0,1,0.5d0,x0(:,1),1.0d0)
  write(*,*) 'kinetic :', kinetic(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  
  write(*,*) 'overlap :', overlap(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  

  RC(1) =0.5d0
  RC(2) =0.0d0
  RC(3) =0.3d0
  write(*,*) ' nuc_attraction(a, lmn1, RA, b, lmn2, RB, RC)', &
             nuc_attraction(g(1)%exps(1), g(1)%shell, x0(:,1), g(2)%exps(1), g(2)%shell, x0(:,2), RC)
  call Ven%Ven_int(g(1), g(2),RC)
  write(*,*) ' Ven(a,b) is : ', Ven%int_val 
  call Vee%Vee_int(g(1)%exps(1), g(1)%shell, g(1)%origin, g(1)%exps(1), g(1)%shell, g(1)%origin, &
                    g(2)%exps(1), g(2)%shell, g(2)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)
  write(*,*) ' Vee(a,b,a,b) is : ', Vee%int_val 
  

end program 


