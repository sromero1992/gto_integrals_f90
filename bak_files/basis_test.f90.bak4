program basis_test
  use class_basis_function
  use integral
  implicit none
  type(gaussian),allocatable :: g(:) ! Declare gaussian basis 
  type(integ)                :: S, T, Ven, Vee ! Declare gaussian basis 
  real(8)                    :: x0(3,2), temp_exps(3), & !, boys1, R, RC(3), nuc_attraction, kinetic, overlap, &
                                el(2),  tmp1, tmp2, del
  integer                    :: n2, nb, nbas(3), tot_natm_type, atms_of_type_n,all_atms, i, j, k, kk, l, m, mm, ia, ib, bi, ai, & !jb, &
                                n_contracted_g, sf_tmp(2), pf_tmp(2), df_tmp(2), g_index, g_upper_bound, jm, im, nrec
  integer, allocatable       :: qe(:), qn(:), n_atm(:), sf(:), pf(:), df(:), sf_sup(:), pf_sup(:), df_sup(:), &
                                nb_tmp(:), nbas_tmp(:)
  real(8), allocatable       :: S_MAT(:,:), ovlbaby(:), S_VEC(:)
  character(10)              :: dum_str
  logical                    :: ext_bas, le


  del = 1.0d-7
  nb = 3
  tot_natm_type = 1
  atms_of_type_n = 2
  allocate(g(atms_of_type_n))
  !x0(xi,no.atom) 
  x0(1,1)=0.2d0
  x0(2,1)=0.0d0
  x0(3,1)=0.0d0
  !!!!!!!!!!!!!!!!
  !x0(:,2)=x0(:,1)
  x0(1,2)=0.0d0
  x0(2,2)=0.7d0
  x0(3,2)=0.4d0
  !!!!!!!!!!!!!



  g(1)%origin = x0(:,1)
  g(2)%origin = x0(:,2)
  g(1)%nb   = 3
  g(2)%nb   = 3
  g(1)%nbas = 1
  g(2)%nbas = 1

  call g(1)%allocation()
  call g(2)%allocation()

!  temp_exps(1)= 3.42525091d0
!  temp_exps(2)= 0.62391373d0
!  temp_exps(3)= 0.16885540d0
!  g(1)%exps    = temp_exps
!  g(2)%exps  = temp_exps
!
!  g(1)%coef(1) = 0.15432897d0
!  g(1)%coef(2) = 0.53532814d0
!  g(1)%coef(3) = 0.44463454d0
!  g(2)%coef  = g(1)%coef 
!
!  g(1)%shell(1)= 0
!  g(1)%shell(2)= 0
!  g(1)%shell(3)= 0
!  g(2)%shell = g(1)%shell
!
!  call g(1)%normalization()
!  call g(2)%normalization()
!  call g(1)%print_gaussian_info()  ! Call a class subroutine
!  call g(2)%print_gaussian_info()  ! Call a class subroutine
!
!  call S%S_int(g(1), g(2))
!  write(*,*) ' S(a,b) is : ', S%int_val 
!  call T%T_int(g(1), g(2))
!  write(*,*) ' T(a,b) is : ', T%int_val 
!  write(*,*) 'Boys1(1,0.5)', boys1(1,0.5d0)
!  write(*,*) 'R_{tuv}^n(p*RPC^2)', R(1,0,0,1,0.5d0,x0(:,1),1.0d0)
!  write(*,*) 'kinetic :', kinetic(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  
!  write(*,*) 'overlap :', overlap(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  
!
!  RC(1) =0.5d0
!  RC(2) =0.0d0
!  RC(3) =0.3d0
!  write(*,*) ' nuc_attraction(a, lmn1, RA, b, lmn2, RB, RC)', &
!             nuc_attraction(g(1)%exps(1), g(1)%shell, x0(:,1), g(2)%exps(1), g(2)%shell, x0(:,2), RC)
!  call Ven%Ven_int(g(1), g(2),RC)
!  write(*,*) ' Ven(a,b) is : ', Ven%int_val 
!  call Vee%Vee_int(g(1)%exps(1), g(1)%shell, g(1)%origin, g(1)%exps(1), g(1)%shell, g(1)%origin, &
!                   g(2)%exps(1), g(2)%shell, g(2)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)
!  write(*,*) ' Vee(a,b,a,b) is : ', Vee%int_val 
 
  deallocate(g)

  
  ext_bas = .FALSE.
  open(11,file='ISYMGEN')
  read(11,*) tot_natm_type  

  allocate(   n_atm(tot_natm_type))
  allocate(nbas_tmp(tot_natm_type))
  allocate(  nb_tmp(tot_natm_type))
  !Reading mainly total number of atoms in calculation to construct the objects
  do i = 1, tot_natm_type
     read(11,*) tmp1, tmp2 !qn is the atom e.g. qn=1 is hydrogen 
     read(11,*) dum_str
     read(11,*) n_atm(i) !number of atoms of type i
     do j = 1, n_atm(i) + 1
         read(11,*) dum_str
     end do
     read(11,*) nb_tmp(i)!Number of bare gaussians
     read(11,*) sf_tmp(1),pf_tmp(1),df_tmp(1) 
     read(11,*) sf_tmp(2),pf_tmp(2),df_tmp(2) 
     !The following turns off suplemental S P D functions
     if ( ext_bas ) then
        nbas_tmp(i) =  sum(sf_tmp(:)) + sum(pf_tmp(:)) + sum(df_tmp(:)) 
     else
        nbas_tmp(i) =  sf_tmp(1) + pf_tmp(1) + df_tmp(1) 
     end if
     write(*,*) 'number of S P D functions (includes supplemental): ',nbas_tmp(i)
     do j = 1, nbas_tmp(i) + 1 !+1 for the gaussian exponent
        do k = 1, nb_tmp(i) / 3
           read(11,*) dum_str 
        end do
     end do
     if (i .EQ. tot_natm_type) then
        read(11,*) dum_str
        if ( dum_str  .EQ. 'ELECTRONS') then
            write(*,*) 'Successful allocation of needed arrays for objects'
        end if 
     end if
  end do  
  write(*,*) 'functions S and supplemental: ',sf_tmp(1) ,',',sf_tmp(2)
  write(*,*) 'functions P and supplemental: ',pf_tmp(1) ,',',pf_tmp(2)
  write(*,*) 'functions D and supplemental: ',df_tmp(1) ,',',df_tmp(2)

  n_contracted_g = sum(n_atm(:))
  write(*,*) 'total number of contracted gaussians: ', n_contracted_g

  ! Allocation for contracted gaussians
  allocate(      g (n_contracted_g)) !Number of contracted gaussian basis 
  ! Allocation for ith atom type
  allocate(      qe (tot_natm_type)) !Number of electrons
  allocate(      qn (tot_natm_type)) !Nuclei number, for each gaussian
  !S P D functions and supplemental
  allocate(      sf (tot_natm_type)) 
  allocate(      pf (tot_natm_type)) 
  allocate(      df (tot_natm_type)) 
  allocate(  sf_sup (tot_natm_type)) 
  allocate(  pf_sup (tot_natm_type)) 
  allocate(  df_sup (tot_natm_type)) 
  write(*,*) 'allocation completed'

  rewind(unit = 11)
  read(11,*) tot_natm_type  
  do i = 1, tot_natm_type 
     read(11,*) qe(i), qn(i) !qn is the atom e.g. qn=1 is hydrogen 
     read(11,*) dum_str
     read(11,*) n_atm(i) !number of atoms of type i
     do j = 1, n_atm(i) + 1
         read(11,*) dum_str
     end do
     !Think ontranslation from g(1:n_atm(i)) and next type g(sum(1:n_atm(i-1))+1:n_atm(i))
     if ( i .EQ. 1 ) then
        g_index = 1  !first gaussian
     else 
        g_index = sum( n_atm( 1: (i-1) ) ) + 1
     end if
     g(g_index)%n_atm = qn(i) ! Atomic number
     read(11,*) g(g_index)%nb!Number of bare gaussians
     write(*,*) 'total number of bare gaussian (',1,') : ', g(g_index)%nb
     !Read S P D functions
     read(11,*) g(g_index)%sf    , g(g_index)%pf    , g(g_index)%df
     read(11,*) g(g_index)%sf_sup, g(g_index)%pf_sup, g(g_index)%df_sup 
     if (ext_bas) then
        !nbas in gaussian structure is the number of basis functions
        g(g_index)%nbas =  g(g_index)%sf + g(g_index)%pf + g(g_index)%df + &
                           g(g_index)%sf_sup + g(g_index)%pf_sup +  g(g_index)%df_sup 
     else
        g(g_index)%nbas = g(g_index)%sf + g(g_index)%pf + g(g_index)%df  
     end if 
     write(*,*) 'total number of basis functions(',g_index,') : ', g(g_index)%nbas
     call g(g_index)%allocation() !Allocates nb in exponents and coefficients
     write(*,*) 'size of gaussian basis coefficients C(ib,ibas) :', size(g(g_index)%coef)
     !Reading all alpha exponents
     do j = 1, g(g_index)%nb/3
        read(11,*) g(g_index)%exps(3*j-2), g(g_index)%exps(3*j-1), g(g_index)%exps(3*j)
     end do
     if (ext_bas) then
        write(*,*) 'NBAS : ',g(g_index)%nbas
        do ib = 1, g(g_index)%nbas !nbas is the number of basis functions in g(i) basis
           do j = 1, g(g_index)%nb/3 !nb is the number of bare gaussians
              read(11,*) g(g_index)%coef(3*j-2, ib),  g(g_index)%coef(3*j-1, ib),  g(g_index)%coef(3*j, ib) 
           end do
        end do
     else
        !Reading all gaussian contraction coefficients Cij
        write(*,*) 'Number of Gaussian basis functions: ',g(g_index)%nbas ! This is contains the number of basis functions
        do ib = 1, g(g_index)%nbas
           !This ifs are for skipping supplemental basis functions
           if      ( ( ib .EQ. g(g_index)%sf+1 ) .AND. (g(g_index)%sf_sup .NE. 0 ) ) then
               n2 = g(g_index)%sf_sup
           else if ( ( ib .EQ. g(g_index)%sf+g(g_index)%pf+1 ) .AND. (g(g_index)%pf_sup .NE. 0)) then
               n2 = g(g_index)%pf_sup
           else if ( ( ib .GT. g(g_index)%sf+g(g_index)%pf+g(g_index)%df+1 ) .AND. (g(g_index)%df_sup .NE. 0) ) then
               n2 = g(g_index)%df_sup
           else 
               n2 = 0
           end if
           do k = 1, n2
              do j = 1, g(g_index)%nb/3
                 read(11,*) temp_exps(1),  temp_exps(1),  temp_exps(1) 
              end do
           end do
           do j = 1, g(g_index)%nb/3
              read(11,*) g(g_index)%coef(3*j-2,ib),  g(g_index)%coef(3*j-1,ib),  g(g_index)%coef(3*j,ib) 
           end do
           !write(*,*) g(g_index)%coef(:,ib)
        end do
     end if 
!Pass all the read to all the contracted gaussians of same type!
     if ( (n_atm(i) .GT. 1) ) then
        if (i .GT. 1) then
           g_upper_bound = sum(n_atm(1:i))
        else
           g_upper_bound = n_atm(1)
        end if
        do k = g_index + 1, g_upper_bound 
           g(k) = g(g_index)
        end do
     end if
  end do
  close(11)

  !Read tom positions from  SYMBOL 
  open(12,file='SYMBOL')
  do i=1,10
     read(12,*)
  end do
  do i = 1, tot_natm_type
     do j = 1, n_atm(i)
        read(12,*)  dum_str, dum_str, g(j)%origin(1), g(j)%origin(2), g(j)%origin(3), dum_str
     end do
  end do
  read(12,*) dum_str, dum_str, el(1), el(2) ! number of electrons up and dn
  close(12)

  deallocate(  nb_tmp)
  deallocate(nbas_tmp)
  deallocate(      sf) 
  deallocate(      pf) 
  deallocate(      df) 
  deallocate(  sf_sup) 
  deallocate(  pf_sup) 
  deallocate(  df_sup) 
 



  !For my ISYMGEN and SYMBOL, I have to same hydrogens
  g(1)%shell(1) = 0
  g(1)%shell(2) = 0
  g(1)%shell(3) = 0
  g(2)%shell = g(1)%shell
  
  !call g(1)%print_gaussian_info() 
  !call g(2)%print_gaussian_info() 
  !call S%S_int( g(1), g(2))
  !write(*,*) ' S(a,b) is : ', S%int_val 

  !construct S_MAT !using nbas here made problems ...
  if (ext_bas) then
      nbas = sum ( g(:)%sf ) !+ g(:)%sf_sup+ g(:)%pf*3 + g(:)%pf_sup*3 + g(:)%df*6 +g(:)%df_sup*6 )
  else
      !nbas = sum ( g(:)%sf ) !+ g(:)%pf*3 + g(:)%df*6)
      nbas(1) = sum ( g(:)%sf )
      nbas(2) = sum ( g(:)%sf + g(:)%pf*3)
      nbas(3) = sum ( g(:)%sf + g(:)%pf*3 + g(:)%df*6)
  end if
  write(*,*) 'NBAS last:', nbas(2)
  allocate( S_MAT(nbas(2),nbas(2)))
  all_atms = sum(n_atm(:))
  l=1 !Has to be over all the different types (l) of atoms
  !write(*,*) 'Overlap matrix'
  S_MAT = 0.0d0
  do ai = 1, all_atms   ! atom sites
     do bi = ai, all_atms
        do i = 1 + (ai-1)*g(ai)%nbas, ai* g(ai)%nbas !nbas !Loop over number of basis functions
           do j = 1 + (bi-1)*g(bi)%nbas, bi* g(bi)%nbas !nbas
           !Here an if to achieve upper triag, bi>ai do the last one, else, i + (bi-1)*g(bi)%nbas
              !write(*,*) 'ai, bi, i, j  :', ai, bi, i, j
              g(ai)%shell = 0
              g(bi)%shell = 0
!Beging of S-X overlaps 
              if  (i .LE. nbas(1) ) then  
                 if  (j .LE. nbas(1) ) then !bi are the columns of S_MAT
!Calculate S-S overlap
                     im = mod(i , g(ai)%sf)
                     if (im .EQ. 0) im = g(ai)%sf
                     jm = mod(j , g(bi)%sf)
                     if (jm .EQ. 0) jm = g(bi)%sf
                     call S%S_int( g(ai), g(bi), im, jm)      
                     !write(*,*) '**********S_int :',i,j,S%int_val
                     S_MAT(i,j) = S_MAT(i,j) + S%int_val
                 end if
!Loop approach for  S-Pi overlap
                 do k = 1, 3
                    if ( ( j .LE. g(bi)%sf + g(bi)%pf*k ) .AND. (j .GT. g(bi)%sf + g(bi)%pf*(k-1) )  )  then  !Maybe a loop to compact this
                       g(bi)%shell(k) = 1 !Shell to activate, e.g. (1,0,0) => Px to calc overlap S-Px
                       im = mod(i - g(ai)%sf, g(ai)%pf)
                       if (im .EQ. 0) im = g(ai)%pf
                       jm = mod(j - g(bi)%sf, g(bi)%pf)
                       if (jm .EQ. 0) jm = g(bi)%pf
                       call S%S_int( g(ai), g(bi),g(ai)%sf + im, g(bi)%sf + jm)      
                       exit
                    end if
!Loop approach for S-Di overlap
                    do kk = k , 3
                       if ( ( j .LE. g(bi)%sf + g(bi)%pf*3+ g(bi)%df*k ) .AND. &
                           (j .GT. g(bi)%sf + g(bi)%pf*3 + g(bi)%df*(k-1) )  )  then  !Maybe a loop to compact this
                          !Shell combinations: (2,0,0)  dxx
                          !                    (1,1,0)  dxy
                          !                    (1,0,1)  dxz
                          !                    (0,2,0)  dyy
                          !                    (0,1,1)  dyz
                          !                    (0,0,2)  dyz
                          g(ai)%shell = 0
                          g(bi)%shell = 0
                          if ( kk .EQ. k) then
                             if ( k .EQ. 1) then
                                g(bi)%shell(k) = 2  !dxx => (2,0,0)       
                             else if ( k .EQ. 2) then
                                g(bi)%shell(k) = 2  !dyy => (0,2,0)
                             else
                                g(bi)%shell(k) = 2  !dzz => (0,0,2)
                             end if 
                          else if ( kk .GT. k) then !dxy when kk=2  k=1 ; dxz  kk=3 k=1
                                g(bi)%shell(k)  = 1 !dyz | kk=3   k=2
                                g(bi)%shell(kk) = 1
                          end if 
                          jm = mod(j - g(bi)%sf -3*g(bi)%pf, g(bi)%df)
                          if (jm .EQ. 0) jm = g(bi)%df
                          call S%S_int( g(ai), g(bi), i, g(bi)%sf + g(bi)%pf + jm)      
                          exit !This exit is done for avoiding more j evaluations
                       end if
                    end do
                 end do 
              end if 
!End of S-X overlaps
!Begin of overlap P-X -> X=Pi,Di
              do m = 1, 3 
                 if ( (i .LE. g(ai)%sf + g(ai)%pf*m) .AND. (i .GT. g(ai)%sf + g(bi)%pf*(m-1)  )) then 
                    g(ai)%shell = 0
                    g(bi)%shell = 0
                    im = mod(i - g(ai)%sf, g(ai)%pf)
                    if (im .EQ. 0) im=g(ai)%pf
                    g(ai)%shell(m) = 1
!Loop approach for Pi-Pj overlap
                    do k = 1, 3  
                       if ( ( j .LE. g(bi)%sf + g(bi)%pf*k ) .AND. (j .GT. g(bi)%sf + g(bi)%pf*(k-1) )  )  then  !Maybe a loop to compact this
                          g(bi)%shell(k) = 1 !Shell to activate, e.g. (1,0,0) => Px to calc overlap S-Px
                          jm = mod(j - g(bi)%sf, g(bi)%pf)
                          if (jm .EQ. 0) jm=g(bi)%pf
                          call S%S_int( g(ai), g(bi), g(ai)%sf + im, g(bi)%sf + jm)      
                          exit
                       end if
!Loop approach for Pi-Dj overlap
                       do kk = k , 3
                          if ( ( j .LE. g(bi)%sf + 3*g(bi)%pf+ g(bi)%df*k ) .AND. &
                               (j .GT. g(bi)%sf + 3*g(bi)%pf + g(bi)%df*(k-1) )  )  then  
                             !Shell combinations: (2,0,0)  dxx
                             !                    (1,1,0)  dxy
                             !                    (1,0,1)  dxz
                             !                    (0,2,0)  dyy
                             !                    (0,1,1)  dyz
                             !                    (0,0,2)  dyz
                             if ( kk .EQ. k) then
                                if ( k .EQ. 1) then
                                   g(bi)%shell(k) = 2  !dxx => (2,0,0)       
                                else if ( k .EQ. 2) then
                                   g(bi)%shell(k) = 2  !dyy => (0,2,0)
                                else
                                   g(bi)%shell(k) = 2  !dzz => (0,0,2)
                                end if 
                             else if ( kk .GT. k) then !dxy when kk=2  k=1 ; dxz  kk=3 k=1
                                   g(bi)%shell(k)  = 1 !dyz | kk=3   k=2
                                   g(bi)%shell(kk) = 1
                             end if 
                             jm = mod(j - g(bi)%sf -3*g(bi)%pf, g(bi)%df)
                             if (jm .EQ. 0) jm = g(bi)%df
                             !write(*,*) 'Pi-Dj  im,jm :',im,jm
                             call S%S_int( g(ai), g(bi), g(bi)%sf + im, g(bi)%sf + g(bi)%pf + jm)      
                             exit
                          end if
                       end do
                    end do 
                 end if 
              end do
!End of Pi-X overlaps
!Begin of overlap Di-X
              do m = 1, 3 
                 do mm = m, 3
                    if ( ( i .LE. g(ai)%sf + 3*g(ai)%pf+ g(ai)%df*m ) .AND. &
                    (i .GT. g(ai)%sf + 3*g(ai)%pf + g(ai)%df*(m-1) )  )  then
                       g(ai)%shell = 0
                       g(bi)%shell = 0
                       !Shell combinations: (2,0,0)  dxx
                       !                    (1,1,0)  dxy
                       !                    (1,0,1)  dxz
                       !                    (0,2,0)  dyy
                       !                    (0,1,1)  dyz
                       !                    (0,0,2)  dyz
                       if ( mm .EQ. m) then
                          if ( m .EQ. 1) then
                             g(bi)%shell(m) = 2  !dxx => (2,0,0)       
                          else if ( m .EQ. 2) then
                             g(bi)%shell(m) = 2  !dyy => (0,2,0)
                          else
                             g(bi)%shell(m) = 2  !dzz => (0,0,2)
                          end if 
                       else if ( mm .GT. m) then !dxy when kk=2  k=1 ; dxz  kk=3 k=1
                             g(bi)%shell(m)  = 1 !dyz | kk=3   k=2
                             g(bi)%shell(mm) = 1
                       end if 
                       im = mod(i - g(ai)%sf -3*g(ai)%pf, g(ai)%df)
                       if (im .EQ. 0) im=g(ai)%df
!Loop approach for Di-Dj overlap
                       do k = 1, 3  
                          do kk = k , 3
                             if ( ( j .LE. g(bi)%sf + 3*g(bi)%pf+ g(bi)%df*k ) .AND. &
                                  (j .GT. g(bi)%sf + 3*g(bi)%pf + g(bi)%df*(k-1) )  )  then 
                                !Shell combinations: (2,0,0)  dxx
                                !                    (1,1,0)  dxy
                                !                    (1,0,1)  dxz
                                !                    (0,2,0)  dyy
                                !                    (0,1,1)  dyz
                                !                    (0,0,2)  dyz
                                if ( kk .EQ. k) then
                                   if ( k .EQ. 1) then
                                      g(bi)%shell(k) = 2  !dxx => (2,0,0)       
                                   else if ( k .EQ. 2) then
                                      g(bi)%shell(k) = 2  !dyy => (0,2,0)
                                   else
                                      g(bi)%shell(k) = 2  !dzz => (0,0,2)
                                   end if 
                                else if ( kk .GT. k) then !dxy when kk=2  k=1 ; dxz  kk=3 k=1
                                      g(bi)%shell(k)  = 1 !dyz | kk=3   k=2
                                      g(bi)%shell(kk) = 1
                                end if 
                                jm = mod(j - g(bi)%sf -3*g(bi)%pf, g(bi)%df)
                                if (jm .EQ. 0) jm = g(bi)%df
                                call S%S_int( g(ai), g(bi), g(bi)%sf + g(bi)%pf + im, g(bi)%sf + g(bi)%pf + jm)      
                                exit
                             end if
                          end do
                       end do 
                    end if 
                 end do
              end do

              !S_MAT(i,j) = S_MAT(i,j) + S%int_val
           end do
        end do
     end do
  end do
  
 write(*,*)
 inquire(file='ovl2.txt',exist=le)
 if (le) then
   open(13,file='ovl2.txt')
   close(13,status='delete')
 end if
 i=1
 open(13,file='ovl2.txt',status='unknown')
 do ib = 1,nbas(1)
     write(13,*) S_MAT(ib,:)
 end do
 close(13)

 if ( .FALSE. ) then
    l = 0
    write(*,*)' ovl_mat, i, j'
    do i=1, nbas(1)
       write(*,*) S_MAT(i,:)
       write(*,*)
    end do
 end if
 

!!!!!!!!!!!!!!!!!!! Everything looks fine up to here
 allocate(S_VEC(nbas(1)*(nbas(1)+1)/2))
 l=0
 m=0
 write(*,*) 'Non- zero elements of S_VEC:' 
 do i=1, nbas(1)
   do k=i, nbas(1)
      l = l + 1
      S_VEC(l) = S_MAT(i,k)
      if (S_VEC(l) .NE. 0.0d0) then
          m = m+1
          write(*,*) S_VEC(l)
      end if
   end do
 end do
write(*,*) 'Number of elements in S_VEC : ', l  
write(*,*) 'Number of non-zero elements in S_VEC : ', m 
 
 !Reading OVLBABY to vector
 open(14,file='OVLBABY',form='UNFORMATTED')
 read(14) nrec
 write(*,*) 'nrec file :',nrec
 allocate(ovlbaby(nrec))
 read(14) (ovlbaby(j),j=1,nrec)
 close(14)

 !Check against ovlbaby
 open(15,file='ovl_ovlbaby2.txt') 
 l=0
 m=0
  do j = 1, nrec   
     if (ovlbaby(j) .NE. 0.0d0) then
        l = l+1
        do i = 1, nbas(1)*(nbas(1) + 1)/2 
           if ( (ovlbaby(j) .NE. 0.0d0) .AND. ( S_VEC(i) .NE. 0.0d0) ) then
              if (  abs( ovlbaby(j) - S_VEC(i) ) .LE.  del  ) then

                 write(15,*) ovlbaby(j), j, S_VEC(i), i ,'     X'
                 write(*,*) ovlbaby(j), j, S_VEC(i), i
                 ovlbaby(j) = -1000.0d0
                 S_VEC(i)   = 1000.0d0
                 m = m+1
                 exit 
              else 
                 write(15,*) ovlbaby(j), j, S_VEC(i), i 
              end if
           end if
        end do
     end if         
 end do               
 close(15)
 write(*,*) 'OVLBABY total elements :',nrec
 write(*,*) 'OVLBABY non-zero elements :', l
 write(*,*) 'S_VEC-OVLBABY similar non-zero elements elements :',m
 write(*,*)
 write(*,*)
 


end program 


