program basis_test
  use integral
  use class_basis_function
  implicit none
  type(gaussian),allocatable :: g(:) ! Declare gaussian basis 
  type(integ)                :: S, T, Ven, Vee ! Declare gaussian basis 
  real(8)                    :: x0(3,2), temp_exps(3), boys1, R, RC(3), nuc_attraction, kinetic, overlap, &
                                el(2),  tmp1, tmp2
  integer                    :: n2, fact2, nb, tot_natm_type, atms_of_type_n, i, j, k, l, ib, jb, &
                                n_atm_tmp, n_contracted_g, sf_tmp(2), pf_tmp(2), df_tmp(2), g_index, g_upper_bound
  integer, allocatable       :: qe(:), qn(:), n_atm(:), sf(:), pf(:), df(:), sf_sup(:), pf_sup(:), df_sup(:), &
                                nb_tmp(:), nbas_tmp(:),atms_of_ntype(:)
  real(8), allocatable       :: SMAT(:,:)
  character(10)              :: dum_str
  logical                    :: ext_bas
    
  nb = 3
  tot_natm_type = 1
  atms_of_type_n = 2
  allocate(g(atms_of_type_n))
  !x0(xi,no.atom) 
  x0(1,1)=0.2d0
  x0(2,1)=0.0d0
  x0(3,1)=0.0d0
  !!!!!!!!!!!!!!!!
  !x0(:,2)=x0(:,1)
  x0(1,2)=0.0d0
  x0(2,2)=0.7d0
  x0(3,2)=0.4d0
  !!!!!!!!!!!!!



  g(1)%origin = x0(:,1)
  g(2)%origin = x0(:,2)
  g(1)%nb   = 3
  g(2)%nb   = 3
  g(1)%nbas = 1
  g(2)%nbas = 1

  call g(1)%allocation()
  call g(2)%allocation()

!  temp_exps(1)= 3.42525091d0
!  temp_exps(2)= 0.62391373d0
!  temp_exps(3)= 0.16885540d0
!  g(1)%exps    = temp_exps
!  g(2)%exps  = temp_exps
!
!  g(1)%coef(1) = 0.15432897d0
!  g(1)%coef(2) = 0.53532814d0
!  g(1)%coef(3) = 0.44463454d0
!  g(2)%coef  = g(1)%coef 
!
!  g(1)%shell(1)= 0
!  g(1)%shell(2)= 0
!  g(1)%shell(3)= 0
!  g(2)%shell = g(1)%shell
!
!  call g(1)%normalization()
!  call g(2)%normalization()
!  call g(1)%print_gaussian_info()  ! Call a class subroutine
!  call g(2)%print_gaussian_info()  ! Call a class subroutine
!
!  call S%S_int(g(1), g(2))
!  write(*,*) ' S(a,b) is : ', S%int_val 
!  call T%T_int(g(1), g(2))
!  write(*,*) ' T(a,b) is : ', T%int_val 
!  write(*,*) 'Boys1(1,0.5)', boys1(1,0.5d0)
!  write(*,*) 'R_{tuv}^n(p*RPC^2)', R(1,0,0,1,0.5d0,x0(:,1),1.0d0)
!  write(*,*) 'kinetic :', kinetic(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  
!  write(*,*) 'overlap :', overlap(g(1)%exps(1), g(1)%shell, g(1)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)  
!
!  RC(1) =0.5d0
!  RC(2) =0.0d0
!  RC(3) =0.3d0
!  write(*,*) ' nuc_attraction(a, lmn1, RA, b, lmn2, RB, RC)', &
!             nuc_attraction(g(1)%exps(1), g(1)%shell, x0(:,1), g(2)%exps(1), g(2)%shell, x0(:,2), RC)
!  call Ven%Ven_int(g(1), g(2),RC)
!  write(*,*) ' Ven(a,b) is : ', Ven%int_val 
!  call Vee%Vee_int(g(1)%exps(1), g(1)%shell, g(1)%origin, g(1)%exps(1), g(1)%shell, g(1)%origin, &
!                   g(2)%exps(1), g(2)%shell, g(2)%origin, g(2)%exps(1), g(2)%shell, g(2)%origin)
!  write(*,*) ' Vee(a,b,a,b) is : ', Vee%int_val 
 
  deallocate(g)

  
  ext_bas = .FALSE.
  open(11,file='ISYMGEN')
  read(11,*) tot_natm_type  

  allocate(   n_atm(tot_natm_type))
  allocate(nbas_tmp(tot_natm_type))
  allocate(  nb_tmp(tot_natm_type))
  !Reading mainly total number of atoms in calculation to construct the objects
  do i = 1, tot_natm_type
     read(11,*) tmp1, tmp2 !qn is the atom e.g. qn=1 is hydrogen 
     read(11,*) dum_str
     read(11,*) n_atm(i) !number of atoms of type i
     do j = 1, n_atm(i) + 1
         read(11,*) dum_str
     end do
     read(11,*) nb_tmp(i)!Number of bare gaussians
     read(11,*) sf_tmp(1),pf_tmp(1),df_tmp(1) 
     read(11,*) sf_tmp(2),pf_tmp(2),df_tmp(2) 
     !The following turns off suplemental S P D functions
     if ( ext_bas ) then
        nbas_tmp(i) =  sum(sf_tmp(:)) + sum(pf_tmp(:)) + sum(df_tmp(:)) 
     else
        nbas_tmp(i) =  sf_tmp(1) + pf_tmp(1) + df_tmp(1) 
     end if

     write(*,*) 'number of S P D functions (includes supplemental): ',nbas_tmp(i)
     do j = 1, nbas_tmp(i) + 1 !+1 for the gaussian exponent
        do k = 1, nb_tmp(i) / 3
           read(11,*) dum_str 
        end do
     end do
     if (i .EQ. tot_natm_type) then
        read(11,*) dum_str
        if ( dum_str  .EQ. 'ELECTRONS') then
            write(*,*) 'Successful allocation of needed arrays for objects'
        end if 
     end if
  end do  
  write(*,*) 'functions S and supplemental: ',sf_tmp(1) ,',',sf_tmp(2)
  write(*,*) 'functions P and supplemental: ',pf_tmp(1) ,',',pf_tmp(2)
  write(*,*) 'functions D and supplemental: ',df_tmp(1) ,',',df_tmp(2)

  n_contracted_g = sum(n_atm(:))
  write(*,*) 'total number of contracted gaussians: ', n_contracted_g

  ! Allocation for contracted gaussians
  allocate( g(n_contracted_g)) !Number of contracted gaussian basis 
  allocate(atms_of_ntype(n_contracted_g))   ! Number of nuclei
 
  ! Allocation for ith atom type
  !allocate(    n_atm(tot_natm_type))
  allocate(      qe (tot_natm_type)) !Number of electrons
  allocate(      qn (tot_natm_type)) !Nuclei number, for each gaussian
  !S P D functions and supplemental
  allocate(      sf (tot_natm_type)) 
  allocate(      pf (tot_natm_type)) 
  allocate(      df (tot_natm_type)) 
  allocate(  sf_sup (tot_natm_type)) 
  allocate(  pf_sup (tot_natm_type)) 
  allocate(  df_sup (tot_natm_type)) 
  write(*,*) 'allocation completed'

  rewind(unit = 11)
  read(11,*) tot_natm_type  
  do i = 1, tot_natm_type !do k = 1,tot_natm_type
     read(11,*) qe(i), qn(i) !qn is the atom e.g. qn=1 is hydrogen 
     read(11,*) dum_str
     read(11,*) n_atm(i) !atms_of_ntype(i)     !number of atoms of type i
     do j = 1, n_atm(i) + 1
         read(11,*) dum_str
     end do
     !Think ontranslation from g(1:n_atm(i)) and next type g(n_atm(i):n_atm(i+1))
     !if ( (i .GT. 1) .AND. ( (i-1) .GT. 1 ) ) then
     if ( i .GT. 2 ) then
        g_index = sum( n_atm( 1: (i-1) ) ) + 1
     else if ( i .GT. 1) then
        g_index = n_atm(i-1) + 1
     else 
        g_index = 1 
     end if
     g(g_index)%n_atm = qn(i) ! Atomic number
     read(11,*) g(g_index)%nb!Number of bare gaussians
     write(*,*) 'total number of bare gaussian (',1,') : ', g(g_index)%nb
 
     !Read S P D functions
     read(11,*) sf(i),pf(i),df(i) 
     read(11,*) sf_sup(i),pf_sup(i),df_sup(i) 

     if (ext_bas) then
        nbas_tmp(i) = sf(i) + sf_sup(i) + pf(i) + pf_sup(i) + df(i) + df_sup(i) !not complete nbas, does't contain angular momentum
        !nbas_tmp(i) = sf(i) + sf_sup(i) + pf(i)*3 + pf_sup(i)*3 + df(i)*6 + df_sup(i)*6 !not complete nbas since it should be sf + 3*pf + 6*df
     else
        nbas_tmp(i) = sf(i) + pf(i) + df(i) 
        !nbas_tmp(i) = sf(i) + pf(i)*3 + df(i)*6 
     end if 
     g(g_index)%nbas = nbas_tmp(i)
     write(*,*) 'total number of basis functions(',1,') : ', g(g_index)%nbas
     call g(g_index)%allocation() !Allocates nb in exponents and coefficients
     write(*,*) 'size of gaussian basis coefficients C(ib,ibas) :', size(g(g_index)%coef)
 
 
 
 
      !Reading all alpha exponents
     do j = 1, g(g_index)%nb/3
        read(11,*) g(g_index)%exps(3*j-2), g(g_index)%exps(3*j-1), g(g_index)%exps(3*j)
     end do
      write(*,*) 'size of gaussian basis coefficients', size(g(g_index)%coef)
     if (ext_bas) then
        nbas_tmp(i) = sf(i) + sf_sup(i) + pf(i) + pf_sup(i) + df(i) + df_sup(i) !not complete nbas since it should be sf + 3*pf + 6*df
        g(g_index)%nbas = nbas_tmp(i)
        write(*,*) 'NBAS : ',g(g_index)%nbas
        !write(*,*) 'Coefficients : '
        do ib = 1, g(g_index)%nbas !nbas is the number of basis functions in g(i) basis
           do j = 1, g(g_index)%nb/3 !nb is the number of bare gaussians
              read(11,*) g(g_index)%coef(3*j-2, ib),  g(g_index)%coef(3*j-1, ib),  g(g_index)%coef(3*j, ib) 
           end do
           !write(*,*) g(g_index)%coef(:,ib)
        end do
     else
        nbas_tmp(i) = sf(i) + pf(i) + df(i) !not complete nbas since it should be sf + 3*pf + 6*df
        !Reading all gaussian contraction coefficients Cij
        g(g_index)%nbas = nbas_tmp(i)
        write(*,*) 'NBAS : ',g(g_index)%nbas
        do ib = 1, g(g_index)%nbas
           !This ifs are for skipping supplemental basis functions
           if      ( ( ib .EQ. sf(i)+1 ) .AND. (sf_sup(i) .NE. 0 ) ) then
               n2 = sf_sup(i)
           else if ( ( ib .EQ. sf(i)+pf(i)+1 ) .AND. (pf_sup(i) .NE. 0)) then
               n2 = pf_sup(i)
               !write(*,*) 'suplemental P functions', pf_sup(i)
               !write(*,*) 'n2 :', n2
           else if ( ( ib .GT. sf(i)+pf(i)+df(i) ) .AND. (df_sup(i) .NE. 0) ) then
               n2 = df_sup(i)
           else 
               n2 = 0
           end if
           do k = 1, n2
              do j = 1, g(g_index)%nb/3
                 read(11,*) temp_exps(1),  temp_exps(1),  temp_exps(1) 
              end do
           end do
           do j = 1, g(g_index)%nb/3
              read(11,*) g(g_index)%coef(3*j-2,ib),  g(g_index)%coef(3*j-1,ib),  g(g_index)%coef(3*j,ib) 
           end do
 
        end do
     end if 
              !Pass all the read to all the contracted gaussians of same type!
     if ( (n_atm(i) .GT. 1) ) then
        if (i .GT. 1) then
           g_upper_bound = sum(n_atm(1:i))
        else
           g_upper_bound = n_atm(1)
        end if
        do k = g_index + 1, g_upper_bound 
           g(k) = g(g_index)
        end do
     end if
  end do
  close(11)

  !Atom positions and SYMBOL information
  open(12,file='SYMBOL')
  do i=1,10
     read(12,*)
  end do
  do i = 1, tot_natm_type
     do j = 1, n_atm(i)
        read(12,*)  dum_str, dum_str, g(j)%origin(1), g(j)%origin(2), g(j)%origin(3), dum_str
     end do
  end do
  read(12,*) dum_str, dum_str, el(1), el(2) ! number of electrons up and dn
  close(12)

!  deallocate(  nb_tmp)
!  deallocate(nbas_tmp)
!  deallocate(      sf) 
!  deallocate(      pf) 
!  deallocate(      df) 
!  deallocate(  sf_sup) 
!  deallocate(  pf_sup) 
!  deallocate(  df_sup) 
 



  !For my ISYMGEN and SYMBOL, I have to same hydrogens
  
  call g(1)%normalization()
  call g(2)%normalization()
  g(1)%shell(1) = 0
  g(1)%shell(2) = 0
  g(1)%shell(3) = 0
  g(2)%shell = g(1)%shell
  call g(1)%print_gaussian_info() 
  call g(2)%print_gaussian_info() 
  call S%S_int( g(1), g(2))
  write(*,*) ' S(a,b) is : ', S%int_val 

  !construct S_MAT !using nbas here made problems ...
  if (ext_bas) then
      nbas_tmp(1) = sf(1) + sf_sup(1)+ pf(1)*3 + pf_sup(1)*3 !+ df(1)
  else
      nbas_tmp(1) = sf(1) + pf(1)*3 !+ df(1)
  end if
  write(*,*) 'NBAS last:', nbas_tmp(1)
  !allocate( SMAT(nbas_tmp(1),nbas_tmp(1)))
   

end program 


